#To add a submodule:


# To manually add a submodule:
git submodule add GIT_URL ./desired/local/path

# To initialize from .gitmodules if you haven't already:
git submodule init
## (Not entirely sure how this works; manual adding seems better)


# To pull all new submodule references (and commits, I think):
git pull --recurse-submodules

# To checkout the right commits in the submodules
git submodule update --recursive

# To checkout the latest remote commit of the submodules, regardless of what parent project points to:
git submodule update --recursive --remote



NOTES: 
- The "--recursive" flag is only if you want to recurse into submodules of submodules
- You will have to commit any changes to submodules made by checking out new versions, such as by using the "--remote" flag




# Tags:

# Lightweight (like a bookmark to a commit):
git tag <tagname> <commit-SHA-id>

#annotated (preferred in general especially for releases)
git tag -a <tagname> -m "annotation text" <commit-SHA>

# To push tags (does not happen by default)
git push origin <tagname>
# OR
git push --tags
# (for all of them)


# May need:
git fetch --tags
#OR
git fetch
# For fetching state without all files, I think

# Check out a tag once tag references are fetched:
git checkout tags/v1.0


NOTES:
- It seems annotated git versions are treated specially (they detach from main branch when pulled as submodules, which maybe makes sense



# Undoing commits
Use "git reset" (look it up), or other techniques like "git revert" or just checking out old commits and re-committing


# Saving uncommitted changes:
git stash
git stash pop # get back most recent
git stash clear # eliminate stash entirely




# Moving branches around:

Look into "git rebase". It can do useful things like move branches ahead of where they originally branched off (mainly use this if you need your branch to use functionality that was later added independently in a different file of the same project)


# Checkout out *contents* of old commits over the top of current files:
git checkout -f <old_commit_hash> -- .
# Can then commit these

# Soft vs hard resets:
git reset --hard # eliminates changes past head
git reset # Just unstages changes?


# Double dash
The double dash "--" on the command line means stop parsing arguments as options, among other things